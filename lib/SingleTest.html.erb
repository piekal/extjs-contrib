<!DOCTYPE HTML>
<!--
  Generated by the ./bin/run_js_tests.rb script
-->
<%#
This is a template for creating 'single-page' tests, where each Javascript 'spec' file gets a corresponding Test Page.

To create the test page, use ./bin/run_js_tests.rb (from the root of the directory), passing in the '--refresh' argument.
%>
<html>
<head>
  <title><%= spec_names.length == 1 ? spec_names[0] : 'Every' %> Test Page</title>

<% if showCss%>
  <!-- Same styles used in the app are showing in the tests -->
  <link rel="stylesheet" type="text/css" href="<%=basedir%>/../ext-6.0.0/build/packages/charts/classic/triton/resources/charts-all.css" />
  <link rel="stylesheet" type="text/css" href="<%=basedir%>/../build/production/<%=theme%>/classic/resources/<%=theme%>-all.css" />

  <link rel="stylesheet" type="text/css" href="<%=basedir%>/../jasmine-2.3.4/lib/jasmine-2.3.4/jasmine.css">

  <script type="text/javascript" src="/~cmd/extensions/sencha-fashion/fashion/fashion.js"></script>
  <script type="text/javascript" src="/~cmd/extensions/sencha-fashion/sass-compiler.js"></script>
<% end %>

<%#  <script type="text/javascript" src="<%=basedir% >/../gvis/gvis.js"></script> %>

  <script type="text/javascript" src="<%=basedir%>/../jasmine-2.3.4/lib/jasmine-2.3.4/jasmine.js"></script>
  <script type="text/javascript" src="<%=basedir%>/../jasmine-2.3.4/lib/jasmine-2.3.4/jasmine-html.js"></script>
  <script type="text/javascript" src="<%=basedir%>/../jasmine-2.3.4/lib/jasmine-2.3.4/boot.js"></script>

  <script type="text/javascript" src="<%=basedir%>/../jasmine-2.3.4/jasmine2-junit/src/jasmine2-junit.js"></script>

  <script type="text/javascript" src="<%=basedir%>/../jasmine-2.3.4/jasmine-ajax-3.2.0/lib/mock-ajax.js"></script>

  <script type="text/javascript">
  var render_tests = true;

  Ext.Loader.setConfig({
      enabled:true,
      disableCaching: false
 });
  Ext.Loader.addClassPathMappings({
<%
  mappings.each do | key, value |
  %> "<%=key%>": "<%=basedir%>/<%=value%>",<%
  end
%>
  });
  
  Ext.define('Extjs.contribs.test.Application', {
    extend: 'Ext.app.Application',
    name: 'TestApp',
    constructor: function() {
      this.callParent(arguments)
    },
    launch: function() {
      Ext.syncRequire(window._requirements);
      
      Ext.defer(function() {
        var JUnitXmlReporter = jasmineRequire.JUnitXmlReporter()
        jasmine.env.addReporter(new JUnitXmlReporter());
  
        jasmine.htmlReporter.initialize()
        jasmine.env.execute()
      }, 1); // Do this a beat after the launch, in case there's a need for classes to initialise themselves.
    }
  })

  window._requirements = [];
  function require(requirements) {
    if (arguments.length > 1) {
      requirements = Array.prototype.slice.call(arguments);
    } else if (typeof requirements === "string") {
      requirements = [ requirements ]
    }
    if (requirements.constructor !== Array) { throw "requirements must be a string or an array" }
    window._requirements = window._requirements.concat(requirements);
  }
  
  Ext.onReady(function() {
    Ext.application('Extjs.contribs.test.Application')
  });
  
  </script>
</head>
<body>

  <div id="main">
  </div>
  
  <%
    include_files.each do |include_file|
  %>
    <script type="text/javascript" src="<%= include_file %>"></script>
  <%
    end
  %>
  
  <% spec_names.each do |spec_name| %>
  <script type="text/javascript" src="<%= spec_name %>Spec.js"></script>
  <% end %>
</html>
